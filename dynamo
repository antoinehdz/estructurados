wb = load_workbook(ruta_prospectos+archivo, data_only=True)
hoja_formato = wb["Formato"]

celda = hoja_formato["BYT9"]

def col_to_index(col):
    """Convert Excel column letters to zero-indexed number."""
    index = 0
    for c in col:
        index = index * 26 + (ord(c.upper()) - ord('A') + 1)
    return index - 1

def index_to_col(idx):
    """Convert zero-indexed number to Excel column letters."""
    col = ''
    while idx >= 0:
        idx, remainder = divmod(idx, 26)
        col = chr(remainder + 65) + col
        idx -= 1
    return col

def extraccion_tablas(col_inicio,col_datos_inicio,col_excluir,  fila_ini, fila_finak, detalle):
    # Determinar la última columna con datos empezando desde 'BYT'
    max_col = col_datos_inicio
    while True:
        if any(hoja_formato[f'{max_col}{fila_inicio}'].value is not None for fila in range(fila_inicio, fila_fin + 1)):
            max_col = index_to_col(col_to_index(max_col) + 1)
        else:
            break

    max_col = index_to_col(col_to_index(max_col) - 1)  # Retroceder una columna, ajuste correcto

    # Leer los datos
    data = []
    index_values = []
    for fila in range(fila_inicio, fila_fin + 1):
        row_data = []
        col = col_datos_inicio
        index_values.append(hoja_formato[f'{col_inicio}{fila}'].value if hoja_formato[f'{col_inicio}{fila}'].value is not None else "N/A")
        while col != index_to_col(col_to_index(max_col) + 1):  # Usar funciones para controlar el rango correctamente
            if col != col_excluir:
                celda = f'{col}{fila}'
                row_data.append(hoja_formato[celda].value if hoja_formato[celda].value is not None else "N/A")
            col = index_to_col(col_to_index(col) + 1)
        data.append(row_data)

    num_columns = len(data[0])
    column_names = [f"{detalle} {i+1}" for i in range (num_columns)]


    # Crear el DataFrame
    return pd.DataFrame(data, columns = column_names, index = index_values)


def sorted_numerically(df):
    def extract_number(col):
        match = re.search(r'(\d+)$', col)
        if match:
            return (True, int(match.group(1)))
        else:
            return (False, col)
    
    column_order = sorted(df.columns, key=extract_number)
    return df[column_order]

col_inicio = 'BYR'  # Columna para índices
col_datos_inicio = 'BYT'  # Columna inicial para datos
col_excluir = 'BYS'  # Columna para excluir

###########################ENCABEZADO: Fecha de la información.


fila_inicio = 9
fila_fin = 9
detalle = "Fecha"

fecha_info = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

fecha_info.rename(columns = {"Fecha 1": "Fecha"}, inplace=True)

fecha_info = fecha_info.reset_index()

fecha_info = fecha_info.rename(columns = {"index": "Variables"})

###########################SUBENCABEZADO: Identificación del Instrumento Estructurado.

fila_inicio = 13
fila_fin = 18
detalle = "Identificación del Instrumento"

identificador = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

identificador.rename(columns = {"Identificación del Instrumento 1": "Identificación del Instrumento Estructurado"}, inplace=True)

index_rename = {identificador.index[0]: "ISIN", identificador.index[1]: "Tipo Valor", identificador.index[4]: "Ticker Bloomberg", identificador.index[5]: "Ticker Reuters"}
identificador.rename(index=index_rename, inplace=True)

nombre_instrumento = identificador.loc["Tipo Valor"].values[0] + "_" + identificador.loc["Emisora"].values[0] + "_" + identificador.loc["Serie"].values[0]

identificador.drop(identificador.columns[1], axis=1, inplace=True)

identificador = identificador.reset_index()

identificador = identificador.rename(columns = {"index": "Variables"})


###########################SUBENCABEZADO: Identificación del Instrumento Estructurado.

fila_inicio = 22
fila_fin = 43
detalle = "Información General del Instrumento"

info_general = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

index_rename = {info_general.index[14]: "InstrumentoSerieAdicional_Tipo_Valor", info_general.index[15]: "InstrumentoSerieAdicional_Emisor", info_general.index[16]: "InstrumentoSerieAdicional_Serie"}
info_general.rename(index=index_rename, inplace=True)

info_general.rename(columns = {"Información General del Instrumento 1": "Información General del Instrumento Estructurado"}, inplace=True)

info_general = info_general.reset_index()

info_general = info_general.rename(columns = {"index": "Variables"})

##### DETALLE 2: Información de los proyectos o inversiones en los que participa el Instrumento Estructurado.

fila_inicio = 49
fila_fin = 71
detalle = "Inversión"

detalle_2 = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

index_rename = {detalle_2.index[1]: "Inversion_Tipo_Valor", detalle_2.index[2]: "Inversion_Emisor", 
                detalle_2.index[3]: "Inversion_Serie", detalle_2.index[6]: "Monto Total Invertido", 
                detalle_2.index[8]: "Participación del Instrumento Estructurado en el proyecto de inversión", 
                detalle_2.index[9]: "Participación del proyecto en el Instrumento Estructurado",
                detalle_2.index[19]: "Valor Total del Proyecto Financiado"}
detalle_2.rename(index=index_rename, inplace=True)

detalle_2 = detalle_2.reset_index()

detalle_2 = detalle_2.rename(columns = {"index": "Variables"})


########################DETALLE 3: Información de los activos financieros o proyectos promovidos, que componen los fondos de inversión (Private equity fund, venture capital fund o similar).

fila_inicio = 79
fila_fin = 90
detalle = "Inversión"

detalle_3 = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)


detalle_3 = detalle_3.reset_index()

detalle_3 = detalle_3.rename(columns = {"index": "Variables"})

detalle_3 = sorted_numerically(detalle_3)

##########################DETALLE 4: Información de los gastos o comisiones devengados del Instrumento Estructurado.

fila_inicio = 103
fila_fin = 107
detalle = "Gasto/Comisión"

detalle_4 = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

detalle_4 = detalle_4.reset_index()

detalle_4 = detalle_4.rename(columns = {"index": "Variables"})

##########################DETALLE 5: Información de los Coinversionistas que participan en cada una de las inversiones o proyectos promovidos reportados en el DETALLE 2 por el Instrumento Estructurado.
fila_inicio = 113
fila_fin = 117
detalle = "Inversión"

detalle_5 = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)


index_rename = {detalle_5.index[3]: "Participación del Tipo de Coinversionista en el proyecto"}
detalle_5.rename(index=index_rename, inplace=True)

detalle_5 = detalle_5.reset_index()

detalle_5 = detalle_5.rename(columns = {"index": "Variables"})

#########################DETALLE 6: Información de las llamadas de capital y/o derechos de suscripción realizados del Instrumento Estructurado.
fila_inicio = 123
fila_fin = 130
detalle = "Llamada de Capital"

detalle_6 = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

detalle_6 = detalle_6.reset_index()

detalle_6 = detalle_6.rename(columns = {"index": "Variables"})

#########################DETALLE 6: Información de las llamadas de capital y/o derechos de suscripción realizados del Instrumento Estructurado.
fila_inicio = 136
fila_fin = 142
detalle = "Distribución del Instrumento"

detalle_A = extraccion_tablas(col_inicio,col_datos_inicio,col_excluir, fila_inicio, fila_fin, detalle)

detalle_A.rename(columns = {"Distribución del Instrumento 1": "Distribuciones del Instrumento Estructurado"}, inplace=True)

detalle_A = detalle_A.reset_index()

detalle_A = detalle_A.rename(columns = {"index": "Variables"})

#validador de tipo de datos (datetime, numpy.array)
# Definición de la función de conversión de timestamps
def convert_to_dynamodb_format(obj):
    """
    Recursivamente convierte objetos en un formato compatible con DynamoDB.
    - Convierte floats a Decimals.
    - Convierte datetime.datetime a strings en formato ISO 8601.
    """
    if isinstance(obj, pd.DataFrame):  # Si el objeto es un DataFrame
        for column in obj:
            obj[column] = obj[column].apply(convert_to_dynamodb_format)
        return obj
    elif isinstance(obj, list):  # Si el objeto es una lista
        return [convert_to_dynamodb_format(x) for x in obj]
    elif isinstance(obj, float):  # Si el objeto es un float
        return Decimal(str(obj))
    elif isinstance(obj, datetime.datetime):  # Si el objeto es un datetime
        return obj.isoformat()
    elif isinstance(obj, dict):  # Si el objeto es un diccionario
        return {k: convert_to_dynamodb_format(v) for k, v in obj.items()}
    return obj

fecha_info = convert_to_dynamodb_format(fecha_info)
identificador = convert_to_dynamodb_format(identificador)
info_general = convert_to_dynamodb_format(info_general)
detalle_2 = convert_to_dynamodb_format(detalle_2)
detalle_3 = convert_to_dynamodb_format(detalle_3)
detalle_4 = convert_to_dynamodb_format(detalle_4)
detalle_5 = convert_to_dynamodb_format(detalle_5)
detalle_6 = convert_to_dynamodb_format(detalle_6)
detalle_A = convert_to_dynamodb_format(detalle_A)



###creacion dict

# Creando el diccionario con estructura anidada
instrumento_dict = {
    "CLIENT_ID":nombre_instrumento, 
    "Fecha_Informacion": fecha_info,
    "Info_Identificador": identificador,
    "Informacion_General":info_general,
    "Proyectos_Participantes": detalle_2,
    "Activos_Composicion": detalle_3,
    "Gastos_Comisiones": detalle_4,
    "Coinversionistas": detalle_5,
    "Llamadas_Capital": detalle_6,
    "Distribuciones Pagadas": detalle_A
}


def dataframe_to_item_list(df):
    return df.to_dict(orient = 'records')  # Convierte el dataframe en una lista de diccionarios

# Convirtiendo cada DataFrame en una lista de diccionarios
items_fecha_info = dataframe_to_item_list(instrumento_dict["Fecha_Informacion"])
items_info_identificador = dataframe_to_item_list(instrumento_dict["Info_Identificador"])
items_informacion_general = dataframe_to_item_list(instrumento_dict["Informacion_General"])
items_proyectos_participantes = dataframe_to_item_list(instrumento_dict["Proyectos_Participantes"])
items_activos_composicion = dataframe_to_item_list(instrumento_dict["Activos_Composicion"])
items_gastos_comisiones = dataframe_to_item_list(instrumento_dict["Gastos_Comisiones"])
items_coinversionistas = dataframe_to_item_list(instrumento_dict["Coinversionistas"])
items_llamadas_capital = dataframe_to_item_list(instrumento_dict["Llamadas_Capital"])
items_distribuciones_pagadas = dataframe_to_item_list(instrumento_dict["Distribuciones Pagadas"])

client_id = nombre_instrumento  # Este debe ser un identificador único adecuado a tu caso de uso

# Preparación del ítem
item_to_insert  = {
    "CLIENT_ID":nombre_instrumento,
    "Información Respectiva al Instrumento":{ 
    "Fecha_Informacion": items_fecha_info,
    "Info_Identificador": items_info_identificador,
    "Informacion_General":items_informacion_general,
    "Proyectos_Participantes": items_proyectos_participantes,
    "Activos_Composicion": items_activos_composicion,
    "Gastos_Comisiones": items_gastos_comisiones,
    "Coinversionistas": items_coinversionistas,
    "Llamadas_Capital": items_llamadas_capital,
    "Distribuciones Pagadas": items_distribuciones_pagadas
    }
}

# Subir el ítem
dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
table = dynamodb.Table('BD_Alternativos')
table.put_item(Item=item_to_insert)


#Consultas

def get_llamadas_capital_from_dynamodb(client_id):
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    table = dynamodb.Table('BD_Alternativos')
    response = table.get_item(Key={'CLIENT_ID': client_id})
    item = response.get('Item', {})
    llamadas_capital_info = item.get("Información Respectiva al Instrumento", {}).get("Activos_Composicion", [])
    return llamadas_capital_info

# Usar la función
client_id = nombre_instrumento  # El CLIENT_ID usado para insertar el ítem
llamadas_capital_info = get_llamadas_capital_from_dynamodb(client_id)
print("Llamadas de Capital desde DynamoDB:", llamadas_capital_info)

# Convertir la lista de diccionarios a DataFrame
df_llamadas = pd.DataFrame(llamadas_capital_info)

# Convertir todos los Decimals a floats para mejor manejo en el DataFrame (opcional)
df_llamadas = df_llamadas.applymap(lambda x: float(x) if isinstance(x, Decimal) else x)
