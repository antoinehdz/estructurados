identificador.at[1, 'A'] + identificador.at[2, 'A'] + identificador.at[3, 'A']



def next_col(col):
    """ Incrementa un nombre de columna de Excel (e.g., 'A' -> 'B', 'Z' -> 'AA'). """
    if col == '': return 'A'
    last_char = col[-1]
    if last_char != 'Z':  # Si no es la última letra
        return col[:-1] + chr(ord(last_char) + 1)
    else:  # Si es la última letra
        return next_col(col[:-1]) + 'A'

# Ejemplo de uso:
print(next_col('A'))  # Debería imprimir 'B'
print(next_col('Z'))  # Debería imprimir 'AA'
print(next_col('AZ')) # Debería imprimir 'BA'
print(next_col('ZZ')) # Debería imprimir 'AAA'


from openpyxl import load_workbook

# Cargar el libro de Excel
wb = load_workbook(filename='ruta/a/tu/archivo.xlsx')
hoja = wb['NombreDeLaHoja']  # Asegúrate de usar el nombre correcto de la hoja

# Configuración inicial
col_inicio = 'BYT'
fila_inicio = 52
fila_fin = 56

# Encontrar hasta qué columna leer
max_col = col_inicio
while True:
    # Checar si alguna celda en el rango tiene datos
    if any(hoja[f'{max_col}{fila}'].value is not None for fila in range(fila_inicio, fila_fin + 1)):
        max_col = next_col(max_col)  # Moverse a la siguiente columna utilizando la función corregida
    else:
        break

# Corregir para quedarse con la última columna con datos (retroceder uno porque el loop se pasa uno)
max_col = chr(ord(max_col) - 1) if len(max_col) == 1 else max_col[:-1] + chr(ord(max_col[-1]) - 1)

# Leer los datos
data_rows = {}
for fila in range(fila_inicio, fila_fin + 1):
    valores_fila = []
    col = col_inicio
    while col != next_col(max_col):  # Usar la función para detener correctamente
        celda = f'{col}{fila}'
        valores_fila.append(hoja[celda].value if hoja[celda].value is not None else "N/A")
        col = next_col(col)  # Incrementar columna
    data_rows[f'Fila {fila}'] = valores_fila

# Imprimir los datos extraídos
for key, value in data_rows.items():
    print(f"{key}: {value}")

# Guardar y cerrar el libro
wb.save(filename='ruta/a/tu/archivo_modificado.xlsx')
wb.close()

from openpyxl import load_workbook
import pandas as pd

# Cargar el libro de Excel, asegurándose de obtener valores en lugar de fórmulas
wb = load_workbook(filename='ruta/a/tu/archivo.xlsx', data_only=True)
hoja = wb['NombreDeLaHoja']

# Configuración inicial
col_inicio = 'BYR'  # Iniciar desde la columna 'BYR'
col_encabezados = 'BYT'  # Los encabezados están en 'BYT'
fila_inicio = 52
fila_fin = 56

# Determinar la última columna con datos
max_col = col_encabezados
while True:
    if any(hoja[f'{max_col}{fila_inicio}'].value is not None for fila in range(fila_inicio, fila_fin + 1)):
        max_col = next_col(max_col)  # Usar función next_col definida anteriormente
    else:
        break

# Ajustar a la última columna útil
max_col = chr(ord(max_col) - 1) if len(max_col) == 1 else max_col[:-1] + chr(ord(max_col[-1]) - 1)

# Leer los datos incluyendo la fila 52 como encabezados
data = []
index_values = []
for fila in range(fila_inicio, fila_fin + 1):
    row_data = []
    col = col_encabezados
    index_values.append(hoja[f'{col_inicio}{fila}'].value if hoja[f'{col_inicio}{fila}'].value is not None else "N/A")  # Guardar índice
    while col != next_col(max_col):
        celda = f'{col}{fila}'
        row_data.append(hoja[celda].value if hoja[celda].value is not None else "N/A")
        col = next_col(col)
    data.append(row_data)

# Crear el DataFrame usando la primera fila (fila 52) como encabezados de columna
df = pd.DataFrame(data, columns=data[0], index=index_values)  # Establecer index_values como el índice del DataFrame

# Mostrar el DataFrame para verificación
print(df)

# Opcional: Guardar el DataFrame a un archivo CSV
df.to_csv('output.csv', index_label='BYR')

# Cerrar el workbook
wb.close()


##############################################

from openpyxl import load_workbook
import pandas as pd

# Cargar el libro de Excel, asegurándose de obtener valores en lugar de fórmulas
wb = load_workbook(filename='ruta/a/tu/archivo.xlsx', data_only=True)
hoja = wb['NombreDeLaHoja']

# Configuración inicial
col_inicio = 'BYR'  # Columna para índices
col_datos_inicio = 'BYT'  # Columna inicial para datos
col_excluir = 'BYS'  # Columna para excluir
fila_inicio = 52
fila_fin = 56

# Determinar la última columna con datos empezando desde 'BYT'
max_col = col_datos_inicio
while True:
    if any(hoja[f'{max_col}{fila_inicio}'].value is not None for fila in range(fila_inicio, fila_fin + 1)):
        max_col = next_col(max_col)  # Usar función next_col definida anteriormente
    else:
        break

# Ajustar a la última columna útil (retroceder una posición porque el loop va una columna de más)
max_col = chr(ord(max_col) - 1) if len(max_col) == 1 else max_col[:-1] + chr(ord(max_col[-1]) - 1)

# Leer los datos, excluyendo 'BYS'
data = []
index_values = []
for fila in range(fila_inicio, fila_fin + 1):
    row_data = []
    col = col_datos_inicio
    index_values.append(hoja[f'{col_inicio}{fila}'].value if hoja[f'{col_inicio}{fila}'].value is not None else "N/A")
    while col != next_col(max_col):
        if col != col_excluir:  # Saltar la columna 'BYS'
            celda = f'{col}{fila}'
            row_data.append(hoja[celda].value if hoja[celda].value is not None else "N/A")
        col = next_col(col)
    data.append(row_data)

# Crear el DataFrame usando la fila 52 desde 'BYT' como encabezados de columna (excluyendo 'BYS')
df = pd.DataFrame(data, columns=[hoja[f'{col}{fila_inicio}'].value for col in range(ord(col_datos_inicio), ord(max_col)+1) if col != col_excluir], index=index_values)

# Mostrar el DataFrame para verificación
print(df)

# Opcional: Guardar el DataFrame a un archivo CSV
df.to_csv('output.csv', index_label='BYR')

# Cerrar el workbook
wb.close()

##################################
def col_to_index(col):
    """Convert Excel column letters to zero-indexed number."""
    index = 0
    for c in col:
        index = index * 26 + (ord(c.upper()) - ord('A') + 1)
    return index - 1

def index_to_col(idx):
    """Convert zero-indexed number to Excel column letters."""
    col = ''
    while idx >= 0:
        idx, remainder = divmod(idx, 26)
        col = chr(remainder + 65) + col
        idx -= 1
    return col

# Determinar la última columna con datos empezando desde 'BYT'
max_col = col_datos_inicio
while True:
    if any(hoja[f'{max_col}{fila_inicio}'].value is not None for fila in range(fila_inicio, fila_fin + 1)):
        max_col = index_to_col(col_to_index(max_col) + 1)
    else:
        break

max_col = index_to_col(col_to_index(max_col) - 1)  # Retroceder una columna, ajuste correcto

# Leer los datos
data = []
index_values = []
for fila in range(fila_inicio, fila_fin + 1):
    row_data = []
    col = col_datos_inicio
    index_values.append(hoja[f'{col_inicio}{fila}'].value if hoja[f'{col_inicio}{fila}'].value is not None else "N/A")
    while col != index_to_col(col_to_index(max_col) + 1):  # Usar funciones para controlar el rango correctamente
        if col != col_excluir:
            celda = f'{col}{fila}'
            row_data.append(hoja[celda].value if hoja[celda].value is not None else "N/A")
        col = index_to_col(col_to_index(col) + 1)
    data.append(row_data)



Entendido, si deseas renombrar los índices del DataFrame y no las columnas, y quieres que los índices específicos (segundo, tercero y cuarto) sean renombrados a "Tipo_Valor", "Emisor", y "Serie", respectivamente, ajustaremos el código correspondientemente.

Paso a Paso para Renombrar Índices Específicos del DataFrame
Vamos a modificar el DataFrame después de su creación para cambiar los nombres de los índices específicos como solicitado.

Código Ajustado para Renombrar Índices:
python
Copy code
from openpyxl import load_workbook
import pandas as pd

# Funciones auxiliares para manejar índices de columnas de Excel
def col_to_index(col):
    index = 0
    for c in col:
        index = index * 26 + (ord(c.upper()) - ord('A') + 1)
    return index - 1

def index_to_col(idx):
    col = ''
    while idx >= 0:
        idx, remainder = divmod(idx, 26)
        col = chr(remainder + 65) + col
        idx -= 1
    return col

# Cargar el libro de Excel
wb = load_workbook(filename='ruta/a/tu/archivo.xlsx', data_only=True)
hoja = wb['NombreDeLaHoja']

# Configuración de columnas y filas
col_inicio = 'BYR'  # Índice
col_datos_inicio = 'BYT'  # Datos inician aquí
col_excluir = 'BYS'  # Columna excluida
fila_inicio = 52
fila_fin = 56

# Determinar la última columna con datos
max_col = col_datos_inicio
while True:
    if any(hoja[f'{max_col}{fila_inicio}'].value is not None for fila in range(fila_inicio, fila_fin + 1)):
        max_col = index_to_col(col_to_index(max_col) + 1)
    else:
        break
max_col = index_to_col(col_to_index(max_col) - 1)

# Leer los datos
data = []
index_values = []
for fila in range(fila_inicio, fila_fin + 1):
    row_data = []
    col = col_datos_inicio
    index_values.append(hoja[f'{col_inicio}{fila}'].value if hoja[f'{col_inicio}{fila}'].value is not None else "N/A")
    while col != index_to_col(col_to_index(max_col) + 1):
        if col != col_excluir:
            celda = f'{col}{fila}'
            row_data.append(hoja[celda].value if hoja[celda].value is not None else "N/A")
        col = index_to_col(col_to_index(col) + 1)
    data.append(row_data)

# Crear el DataFrame
column_names = [f'Inversión {i+1}' for i in range(len(data[0]))]
df = pd.DataFrame(data, columns=column_names, index=index_values)

# Cambiar nombres específicos de los índices
index_rename = {df.index[1]: "Tipo_Valor", df.index[2]: "Emisor", df.index[3]: "Serie"}
df.rename(index=index_rename, inplace=True)
# Crear el DataFrame
df = pd.DataFrame(data, columns=[hoja[f'{index_to_col(col_to_index(col_datos_inicio) + i)}{fila_inicio}'].value for i in range(col_to_index(max_col) - col_to_index(col_datos_inicio) + 1) if index_to_col(col_to_index(col_datos_inicio) + i) != col_excluir], index=index_values)

################
# Creando el diccionario con estructura anidada
instrumento_dict = {
    "1R": {
        "Información Perteneciente al Instrumento": {
            "Fecha_Informacion": df1,
            "Info_Identificador": df2,
            "Info_General": df3,
            "Proyectos_Participantes": df4,
            "Activos_Composicion": df5,
            "Gastos_Comisiones": df6,
            "Llamadas_Capital": df7
        }
    }
}

